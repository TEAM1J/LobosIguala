@using LobosIguala.Domain.Entities;
@inject SweetAlertService Swal



<EditForm Model="@Entrenador" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInValidSubmit">
    <DataAnnotationsValidator />




    <div class="row">
        <div class="col-12 text-end mb-2">
            <a class="btn btn-primary"
               href="/entrenadores/list"
               style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
                Lista de entrenadores
            </a>
        </div>
    </div>

    <div class="card shadow">
        <h5 class="card-header bg-danger" style="color:#ffffff" ;><center>Formulario Entrenadores</center></h5>
        <div class="card-body">
            <div class="container">
                <div class="row">
                    <h6>Datos personales y de contacto</h6>
                    <div class="col-md-6 mb-3">
                        <label for="">Nombre</label>
                        <InputText id="nombre" class="form-control" placeholder="Escribe el nombre" @bind-Value="Entrenador.Nombre" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label for="">Apellidos </label>
                        <InputText id="apellidos" class="form-control" placeholder="Escribe los apellidos" @bind-Value="Entrenador.Apellidos" />
                    </div>
                    <div class="mb-3">
                        <label for="">Telefono </label>
                        <InputText id="tel" class="form-control" placeholder="Escribe el telefono" @bind-Value="Entrenador.Telefono" />
                    </div>


                </div>

                <div class="row">
                    <div class="col-md-4 mb-3">
                    </div>
                    <div class="col-md-4 mb-3">


                        @if (this.IsEdit)

                        {
                            <button class="btn btn-primary" type="submit" disabled="@this.EstaOcupado">Actualizar</button>
                            <button class="btn btn-danger" type="button" @onclick="HandleCancel" disabled="@this.EstaOcupado">Cancelar</button>



                        }
                        else
                        {
                            <button class="btn btn-primary" type="submit" href="/horarios/list" disabled="@this.EstaOcupado">Guardar</button>
                            <a class="btn btn-danger"
                               href="/entrenadores/list"
                               style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
                                Cancelar
                            </a>


                        }
                    </div>
                    <div class="col-md-4 mb-3">
                    </div>

                </div>
            </div>

        </div>

    </div>
</EditForm>
@code {

    //Parameteros de entrada
    [Parameter]
    public Entrenador? Entrenador { get; set; }


    [Parameter]
    public bool EstaOcupado { get; set; }
    [Parameter]
    public bool IsEdit { get; set; }

    //Parametros de salida
    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }


    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)

        {
            await OnSubmit.InvokeAsync(true);


        }

    }
    private async Task HandleInValidSubmit()
    {
        if (OnSubmit.HasDelegate)

        {
            await OnSubmit.InvokeAsync(false);

        }

    }
    private async Task HandleCancel()
    {




        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }


}