@page "/entrenadores/edit/{EntrenadorId:int}"
@using LobosIguala.Data;
@using LobosIguala.Domain.Entities;
@using Microsoft.EntityFrameworkCore;
@inject SweetAlertService Swal

<PageTitle>Editar Entrenador</PageTitle>
<h5>Editar Entrenador</h5>


@if (this.Entrenador is null && !EstaOcupado)

{
    <div class="alert alert-danger">
        El Entrenador con el Id @this.EntrenadorId no existe en la DataBase
    </div>

}
else
{



    <EntrenadoresForm Entrenador="@this.Entrenador"
           EstaOcupado="@this.EstaOcupado"
           IsEdit="true"
           OnSubmit="HandleSubmit"
           OnCancel="NavegarAOverView" />



}

@if (MessageError is not null)
{
    <b />
    <div class="alert alert-danger">
        @this.MessageError
    </div>


}


@code {
    [Parameter]
    public int EntrenadorId { get; set; }
    private Entrenador? Entrenador { get; set; } = new();
    private bool EstaOcupado { get; set; }



    public bool IsEdit { get; set; }
    [Inject]

    public IDbContextFactory<LobosIgualaDbContext> ContextFactory { get; set; }
    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public StateContainer? stateContainer { get; set; }
    public string? MessageError { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        EstaOcupado = true;
        try
        {
            using var db = ContextFactory.CreateDbContext();
            this.Entrenador = await db.Entrenadores.AsNoTracking()
            .FirstOrDefaultAsync(emp => emp.Id.Equals(this.EntrenadorId));


        }
        finally
        {
            EstaOcupado = false;

        }



    }


    private async Task HandleSubmit(bool isValid)
    {



        if (this.Entrenador is null || this.EstaOcupado || !isValid)
        {
            return;
        }


        EstaOcupado = true;

        try
        {
            using var db = ContextFactory?.CreateDbContext();
            await Swal.FireAsync(
                "Actualizado Exitosamente!",
                    "",
                    "success"
                );
            db.Update(this.Entrenador);
            await db.SaveChangesAsync();
            NavegarAOverView();

        }
        catch (DbUpdateConcurrencyException)
        {


            MessageError = "El entrenador fue modificado por otro usuario. Por favor recarga esta pagina para ver los ultimos cambios";

        }
        catch (Exception error)
        {
            MessageError = $"Ocurrrio un error {error.Message}";
        }
        finally
        {
            EstaOcupado = false;
        }
    }
    private void NavegarAOverView()
    {
        NavigationManager.NavigateTo($"/entrenadores/list/{stateContainer.SistemaOverViewPage}");

    }


}
