@*@page "/employes/list"*@
@page "/alumnos/list/{PaginaActual:int?}"
@using LobosIguala.Data;
@using LobosIguala.Domain.Entities;
@using LobosIgualaApp.Interface;
@using LobosIgualaApp.Servicios;
@using LobosIgualaApp.Shared;
@using Microsoft.EntityFrameworkCore;
@inject SweetAlertService Swal
@inject IJSRuntime JS

<PageTitle>Alumnos</PageTitle>
<h5>Lista de Alumnos</h5>

<div class="row">
    <div class="col-12 text-start mb-2">
        <a class="btn btn-primary"
           href="/alumnos/add"
           style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
            Agregar Nuevo
        </a>
    </div>
</div>

@*<a class="btn btn-danger"
   href="/alumnos/add"
   style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
    <strong>Nuevo</strong>
</a>

*@



@if (Alumnos == null)
{
    <div>
        Cargando informacion
    </div>
}
else
{



    <ul class="pagination m-3">
        <li class="page-item @(PaginaActual == 1 ? "disabled": " ")">
            <a class="page-link" href="alumnos/list/@(PaginaActual -1)">&laquo;</a>

        </li>


        @for (int i = 1; i <= TotalPaginas; i++)
        {

            <li class="page-item @(PaginaActual == i ? "active": " ")">
                <a class="page-link" href="alumnos/list/@i">@i</a>

            </li>


        }
        <li class="page-item @(PaginaActual == TotalPaginas ? "disabled": " ")">
            <a class="page-link" href="alumnos/list/@(PaginaActual +1)">&raquo;</a>

        </li>
       

    </ul>

    <div class="card shadow">
        <div class="card-body">
           @* <div class="row">
                <div class="col-12 text-end mb-2">
                    <a class="btn btn-secondary"
                       href="/alumnos/add"
                       style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
                        Agregar Alumno
                    </a>
                </div>
                
            </div>*@
            
            <div class="row">
                <div class="col-12">
                    <table class="table align-middle mb-0 bg-white">


                        <thead class="bg-danger" style="color:#ffffff" ;>

                            <tr>
                                <th>Nombre completo</th>
                                <th>Fecha de nacimiento</th>
                                <th>Categoria</th>
                                <th>Tutor</th>
                                <th>Telefono</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>



                        <tbody>
                            @foreach (var alumno in Alumnos)
                            {
                                <tr>
                                    <td>@alumno.Nombre @alumno.Apellidos</td>
                                    <td>@alumno.FechaDeNacimiento</td>
                                    <td>@alumno.Categoria?.Nombre</td>
                                    <td>@alumno.NombreDelTutor @alumno.ApellidosDelTutor</td>
                                    <td>@alumno.Telefono</td>
                                    <td class="btn-group-sm">
                                        <button class="btn btn-outline-danger" @onclick="()=> MostrarPagos(alumno.Id)">Pagos</button>


                                        <a href="/alumnos/edit/@alumno.Id" class="btn btn-outline-primary">Editar</a>
                                        <button class="btn btn-outline-danger" @onclick="() => HandleDelete(alumno)">Eliminar</button>
                                    </td>

                                </tr>

                            }
                        </tbody>
                    </table>
                </div>
            </div>
            
        </div>
      

    </div>
   
}

<div class="modal" style="display: @(showPagosModal ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Pagos del Alumno</h5>
               @* <button type="button" class="close" @onclick="CerrarModal">
                    <span>&times;</span>
                </button>*@
            </div>
            <div class="modal-body">
                <ul>
                    <table>
                        <thead>
                            <tr>
                                <th>Folio</th>
                                <th>Alumno</th>
                                <th>Concepto</th>
                                <th>Importe</th>
                                <th>Fecha de pago</th>


                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var pago in Pagos)
                            {
                                <tr>
                                    <td>@pago.Id</td>
                                    <td>@pago.Alumno.Nombre @pago.Alumno.Apellidos</td>
                                    <td>@pago.Concepto</td>
                                    <td>@pago.Importe</td>
                                    <td>@pago.FechaDePago</td>



                                </tr>

                            }

                        </tbody>
                        
                    </table>
                    
                </ul>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline-secondary" @onclick="CerrarModal">
                    Cerrar

                </button>

            </div>
        </div>
    </div>
</div>





@code {

    public List<Alumno>? Alumnos { get; set; }
    public List<Pago> Pagos { get; set; } = new();
    [Parameter]
    public int? PaginaActual { get; set; }

    [Inject]
    public IDbContextFactory<LobosIgualaDbContext>? ContextFactory { get; set; }
    [Inject]
    public NavigationManager? NavigationManager { get; set; }
    [Inject]
    public StateContainer? stateContainer { get; set; }
    private const int itemporpagina = 4;
    private bool showPagosModal = false;
    private int alumnoSeleccionado = -1;
    [Inject]
    public IPagoServicios? PagoServicio { get; set; }




    public int TotalPaginas { get; set; }

    private void CerrarModal()
    {
        showPagosModal = false;
        alumnoSeleccionado = -1;
        StateHasChanged();
    }

    private async Task MostrarPagos(int alumnoId)
    {
        try
        {
            Pagos = await PagoServicio.ObtenerPagosPorAlumno(alumnoId);
            alumnoSeleccionado = alumnoId;
            showPagosModal = true;
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error al obtener pagos: {ex.Message}");
        }
        

    }



    //protected override async Task OnInitializedAsync()

    //El onparameter es para refrescar automaticamente
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();

    }
    private async Task HandleDelete(Alumno alumno)
    {

        //var isok = await JS.InvokeAsync<bool>("confirm", $"Deseas eliminar al usuario seleccionado?");











        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "Deseas eliminar al alumno seleccionado?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, espera",
                ConfirmButtonColor = "#1669c9",
                CancelButtonColor = "#dc3545"
            });

        var isok = !string.IsNullOrEmpty(resultado.Value);

        if (isok)
        {

            try
            {
                using var Db = ContextFactory?.CreateDbContext();
                Db.Alumnos.Remove(alumno);
                await Db.SaveChangesAsync();

            }

            catch (DbUpdateConcurrencyException)
            {


            }

            await LoadData();
        }


    }

    private async Task LoadData()
    {
        int itemsporsaltar = 0;

        if (PaginaActual is null or < 1)
        {
            PaginaActual = 1;
        }
        else
        {

            //se multiplica para saltar los registros
            itemsporsaltar = (PaginaActual.Value - 1) * itemporpagina;


        }

        using var Db = ContextFactory?.CreateDbContext();
        var totalAlumnos = Db.Alumnos.Count();
        TotalPaginas = totalAlumnos == 0 ? 1 : (int)Math.Ceiling((double)totalAlumnos / itemporpagina);




        if (PaginaActual > TotalPaginas)
        {
            NavigationManager?.NavigateTo($"alumnos/list/{TotalPaginas}");
        }

        stateContainer.SistemaOverViewPage = PaginaActual.Value;
        this.Alumnos = await Db.Alumnos.Include(em => em.Categoria)
        .OrderBy(em => em.Nombre)
        .Skip(itemsporsaltar)
        .Take(itemporpagina)
        .ToListAsync();


    }






}